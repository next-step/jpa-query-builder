package persistence.sql.dml;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import persistence.sql.QueryBuilder;

import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.stream.Collectors;

public class DMLQueryBuilder extends QueryBuilder {

    private static final String INSERT_QUERY = "INSERT INTO %s (%s) VALUES (%s);";

    public String getInsertQueryString(Object object) {
        if (!object.getClass().isAnnotationPresent(Entity.class)) {
            throw new IllegalArgumentException("Does not have an @Entity annotation.");
        }
        return String.format(
                INSERT_QUERY,
                generateTableName(object.getClass()),
                generateColumns(object.getClass().getDeclaredFields()),
                generateValues(object)
        );
    }

    @Override
    public String generateColumn(Field field) {
        if (isIdAutoGenerated(field)) {
            return generateColumnName(field);
        }
        return EMPTY_STRING;
    }

    public String generateValues(Object object) {
        return Arrays.stream(object.getClass().getDeclaredFields())
                .filter(this::isNotTransientAnnotationPresent)
                .filter(this::isIdAutoGenerated)
                .map(field -> generateValue(field, object))
                .collect(Collectors.joining(COMMA));
    }

    public String generateValue(Field field, Object object) {
        try {
            field.setAccessible(true);
            return convertValue(field.getType(), String.valueOf(field.get(object)));
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    }

    private boolean isIdAutoGenerated(Field field) {
        if (!field.isAnnotationPresent(GeneratedValue.class)) {
            return true;
        }
        return GenerationType.UUID.equals(field.getAnnotation(GeneratedValue.class).strategy());
    }

    private String convertValue(Class<?> type, String value) {
        if (type.equals(String.class)) {
            value = "'" + value + "'";
        }
        return value;
    }

}
