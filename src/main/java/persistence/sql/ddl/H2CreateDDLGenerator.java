package persistence.sql.ddl;

import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class H2CreateDDLGenerator implements CreateDDLGenerator {
    private static Map<Class, String> typeToTypeDefinition = Map.of(
            String.class, "VARCHAR(255)",
            Long.class, "BIGINT",
            Integer.class, "INTEGER"
    );

    @Override
    public String generate(Entity entity) {
        String command = createCommand(entity);
        String definition = getDefinition(entity);

        return "%s (%s);".formatted(command, definition);
    }

    private String createCommand(Entity entity) {
        String name = entity.getName();

        return "CREATE TABLE %s".formatted(name);
    }

    private String getDefinition(Entity entity) {
        String idDefinition = getIdDefinition(entity.getIdField());
        Stream<String> fieldDefinitions = entity.getFields().stream().map(this::getFieldDefinition);

        return Stream.concat(Stream.of(idDefinition), fieldDefinitions).collect(Collectors.joining(", "));
    }

    private String getIdDefinition(EntityIdField idField) {
        EntityField field = idField.getField();
        String name = field.getName();
        String typeDefinition = typeToTypeDefinition.get(field.getType());

        return "%s %s generated by default as identity".formatted(name, typeDefinition);
    }

    private String getFieldDefinition(EntityField field) {
        String name = field.getName();
        String typeDefinition = typeToTypeDefinition.get(field.getType());
        String nullable = field.isNullable() ? "" : "not null";

        return "%s %s %s".formatted(name, typeDefinition, nullable);
    }
}
