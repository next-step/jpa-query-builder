package persistence.sql.ddl;

import persistence.sql.ddl.exception.NotSupportException;

import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public final class H2CreateDDLGenerator implements CreateDDLGenerator {
    private static final Map<Class, Function<EntityField, String>> fieldTypeToTypeDefinition = Map.of(
            String.class, entityField -> "VARCHAR(%d)".formatted(entityField.length()),
            Long.class, entityField -> "BIGINT",
            Integer.class, entityField -> "INTEGER"
    );

    private static final Map<Class, String> idTypeToTypeDefinition = Map.of(
            Long.class, "BIGINT",
            Integer.class, "INTEGER"
    );

    @Override
    public String generate(EntityFields entityFields) {
        String command = createCommand(entityFields);
        String definition = getDefinition(entityFields);

        return "%s (%s);".formatted(command, definition);
    }

    private String createCommand(EntityFields entityFields) {
        String name = entityFields.tableName();

        return "CREATE TABLE %s".formatted(name);
    }

    private String getDefinition(EntityFields entityFields) {
        String idDefinition = getIdDefinition(entityFields.idField());
        Stream<String> fieldDefinitions = entityFields.fields().stream().map(this::getFieldDefinition);

        return Stream.concat(Stream.of(idDefinition), fieldDefinitions).collect(Collectors.joining(", "));
    }

    private String getIdDefinition(EntityIdField idField) {
        String name = idField.name();
        String typeDefinition = idTypeToTypeDefinition.get(idField.type());
        String strategy = switch (idField.generationType()) {
            case IDENTITY -> "generated by default as identity";
            default -> throw new NotSupportException();
        };

        return "%s %s %s".formatted(name, typeDefinition, strategy);
    }

    private String getFieldDefinition(EntityField field) {
        String name = field.name();
        String typeDefinition = fieldTypeToTypeDefinition.get(field.type()).apply(field);
        String nullable = field.nullable() ? "" : "not null";

        return "%s %s %s".formatted(name, typeDefinition, nullable);
    }
}
