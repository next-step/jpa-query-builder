package persistence.sql.ddl;

import jakarta.persistence.Column;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import persistence.exception.InvalidGeneratedValueException;
import persistence.sql.common.ColumnType;

public class CreateColumn {

    private final String name;
    private final ColumnType type;
    private final String constraints;
    private final String generatedValue;

    public CreateColumn(Field field) {
        this.name = extractName(field);
        this.type = parseType(field.getType());
        this.constraints = extractConstraints(field);
        this.generatedValue = extractGeneratedValue(field);
    }

    public static String makeColumn(Field field) {
        CreateColumn column = new CreateColumn(field);
        return column.getColumn();
    }

    private String getColumn() {
        return name + type.getType() + constraints + generatedValue;
    }

    /**
     * @Column의 name이 유효하다면 column명으로 설정하여 반환합니다.
     * 없을 경우 기존 field명을 반환합니다.
     */
    private String extractName(Field field) {
        String columnName = field.getName();

        if (!isAnnotation(field, Column.class)) {
            return columnName;
        }

        if (!"".equals(field.getDeclaredAnnotation(Column.class).name())) {
            columnName = field.getDeclaredAnnotation(Column.class).name();
        }

        return columnName;
    }

    /**
     * @Column의 제약조건을 추가해줍니다.
     */
    private String extractConstraints(Field field) {
        String nullable = "";

        if (isAnnotation(field, Column.class)
                && !field.getDeclaredAnnotation(Column.class).nullable()) {
            nullable += " not null";
        }

        return nullable;
    }

    /**
     * @GeneratedValue가 유효시 조건을 추가해 줍니다.
     */
    private String extractGeneratedValue(Field field) {
        if (!isAnnotation(field, GeneratedValue.class)) {
            return "";
        }

        return getGeneratedValue(field.getAnnotation(GeneratedValue.class).strategy());
    }

    /**
     * 필드의 자료형을 읽어 칼럼 자료형으로 치환합니다.
     */
    private <T> ColumnType parseType(Class<T> tClass) {
        return ColumnType.initType(tClass.getSimpleName());
    }

    private String getGeneratedValue(GenerationType generationType) {
        switch (generationType) {
            case IDENTITY:
                return " generated by default as identity";
        }

        throw new InvalidGeneratedValueException();
    }

    private <A> boolean isAnnotation(Field field, Class<A> aClass) {
        Class<? extends Annotation> annotation = aClass.asSubclass(Annotation.class);

        return field.isAnnotationPresent(annotation);
    }
}
