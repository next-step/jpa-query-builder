package persistence.sql.ddl.utils;

import jakarta.persistence.GenerationType;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class ColumnQueryBuilder {

    public static List<String> generateDdlQueryRows(final List<ColumnType> columnTypes) {
        return columnTypes.stream()
                .map(columnType -> columnType.getName() + " "
                        + columnType.getTypeName()
                        + generateLength(columnType.getLength())
                        + generateNotnull(columnType.isNullable())
                        + generateValue(columnType.getGenerationType())
                        + generatePrimaryKey(columnType.isPrimaryKey()))
                .collect(Collectors.toList());
    }

    private static String generatePrimaryKey(final boolean isPrimary) {
        if (isPrimary) {
            return " primary key";
        }
        return "";
    }

    private static String generateLength(final Integer length) {
        return Optional.ofNullable(length)
                .map(e -> "(" + e + ")")
                .orElse("");
    }

    private static String generateNotnull(final boolean isNullable) {
        if(!isNullable) {
            return " not null";
        }
        return "";
    }

    private static String generateValue(final GenerationType generationType) {
        if(generationType == GenerationType.IDENTITY) {
         return " generated by default as identity";
        }
        return "";
    }
}