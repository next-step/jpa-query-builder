package persistence.sql.ddl;

import jdbc.JdbcTemplate;
import jdbc.RowMapper;
import org.jetbrains.annotations.NotNull;
import persistence.sql.ddl.generator.*;

import java.lang.reflect.Field;
import java.sql.*;
import java.util.List;

public class DefaultEntityManager implements EntityManager {
    private final Connection connection;
    private final JdbcTemplate jdbcTemplate;
    private final InsertDMLGenerator insertDMLGenerator;
    private final UpdateDMLGenerator updateDMLGenerator;
    private final SelectDMLGenerator selectDMLGenerator;
    private final DeleteDMLGenerator deleteDMLGenerator;

    public DefaultEntityManager(Connection connection) {
        this.connection = connection;
        this.jdbcTemplate = new JdbcTemplate(connection);
        this.insertDMLGenerator = new DefaultInsertDMLGenerator();
        this.updateDMLGenerator = new DefaultUpdateDMLGenerator();
        this.selectDMLGenerator = new DefaultSelectDMLGenerator();
        this.deleteDMLGenerator = new DefaultDeleteDMLGenerator();
    }

    @Override
    public <T> T persist(T entity) {
        EntityTable entityTable = EntityTable.from(entity);

        if (entityTable.isNotAssignedId(entity)) {
            Object valueOfId = insert(entity, Statement.RETURN_GENERATED_KEYS);

            entityTable.applyId(entity, valueOfId);
        } else if (find(entityTable, entity) == null) {
            insert(entity, Statement.NO_GENERATED_KEYS);
        } else {
            update(entity);
        }

        return entity;
    }

    private <T> T find(EntityTable entityTable, T entity) {
        Object id = entityTable.getId(entity);

        return (T) find(entity.getClass(), id);
    }

    @Override
    public <T> T find(Class<T> clazz, Object id) {
        EntityTable entityTable = EntityTable.from(clazz);

        String query = selectDMLGenerator.generateFindById(entityTable, id);

        List<T> results = jdbcTemplate.query(query, toObject(entityTable));

        if (results.isEmpty()) {
            return null;
        }

        return results.getFirst();
    }

    private <T> Object insert(T entity, int autoGeneratedKeys) {
        String query = insertDMLGenerator.generate(entity);

        try (PreparedStatement statement = connection.prepareStatement(query, autoGeneratedKeys)) {
            statement.execute();

            if (autoGeneratedKeys == PreparedStatement.RETURN_GENERATED_KEYS) {
                ResultSet generatedKeys = statement.getGeneratedKeys();

                generatedKeys.next();

                return generatedKeys.getObject(1);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return null;
    }

    private <T> void update(T entity) {
        String query = updateDMLGenerator.generate(entity);

        jdbcTemplate.execute(query);
    }

    @Override
    public <T> void remove(T entity) {
        EntityTable entityTable = EntityTable.from(entity);

        Object id = entityTable.getId(entity);

        String query = deleteDMLGenerator.generateDeleteById(entityTable, id);

        jdbcTemplate.execute(query);
    }

    @NotNull
    private <T> RowMapper<T> toObject(EntityTable entityTable) {
        return resultSet -> {
            T entity = (T) entityTable.newInstance();

            entityTable.getAllColumnNames().forEach(it -> {
                Field field = entityTable.getFieldByColumnName(it);

                applyValue(resultSet, it, field, entity);
            });

            return entity;
        };
    }

    private <T> void applyValue(ResultSet resultSet, String it, Field field, T entity) {
        try {
            Object value = resultSet.getObject(it);

            FieldUtils.setValue(field, entity, value);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}
