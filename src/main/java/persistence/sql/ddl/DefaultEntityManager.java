package persistence.sql.ddl;

import jdbc.JdbcTemplate;
import jdbc.RowMapper;
import org.jetbrains.annotations.NotNull;
import persistence.sql.ddl.generator.*;

import java.lang.reflect.Field;
import java.sql.*;
import java.util.AbstractMap.SimpleEntry;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class DefaultEntityManager implements EntityManager {
    private final Map<Entry<Class, Object>, Object> cache;
    private final Connection connection;
    private final JdbcTemplate jdbcTemplate;
    private final InsertDMLGenerator insertDMLGenerator;
    private final UpdateDMLGenerator updateDMLGenerator;
    private final SelectDMLGenerator selectDMLGenerator;
    private final DeleteDMLGenerator deleteDMLGenerator;

    public DefaultEntityManager(Map<Entry<Class, Object>, Object> cache, Connection connection) {
        this.cache = cache;
        this.connection = connection;
        this.jdbcTemplate = new JdbcTemplate(connection);
        this.insertDMLGenerator = new DefaultInsertDMLGenerator();
        this.updateDMLGenerator = new DefaultUpdateDMLGenerator();
        this.selectDMLGenerator = new DefaultSelectDMLGenerator();
        this.deleteDMLGenerator = new DefaultDeleteDMLGenerator();
    }

    public DefaultEntityManager(Connection connection) {
        this(new HashMap<>(), connection);
    }

    @Override
    public <T> T find(Class<T> clazz, Object id) {
        if (containsCache(clazz, id)) {
            return (T) getCache(clazz, id);
        }

        Table table = Table.from(clazz);

        String query = selectDMLGenerator.generateFindById(table, id);

        List<Object> results = jdbcTemplate.query(query, toObject(clazz, id, table));

        if (results.isEmpty()) {
            return null;
        } else if (results.size() >= 2) {
            throw new RuntimeException("Expected 1 result, got " + results.size());
        }

        return (T) results.get(0);
    }

    @Override
    public Object persist(Object entity) {
        Class<?> clazz = entity.getClass();
        Table table = Table.from(clazz);

        Field idField = table.getIdField();

        Object id = FieldUtils.getValue(idField, entity);

        if (id == null) {
            Object valueOfId = insert(entity, Statement.RETURN_GENERATED_KEYS);

            FieldUtils.setValue(idField, entity, valueOfId);

            // id 가져오기
            putCache(clazz, valueOfId, entity);
        } else {
            if (find(clazz, id) == null) {
                insert(entity, Statement.NO_GENERATED_KEYS);
            } else {
                update(entity);
            }

            putCache(clazz, id, entity);
        }

        return entity;
    }

    private Object insert(Object entity, int autoGeneratedKeys) {
        String queryOfInsert = insertDMLGenerator.generate(entity);

        try (PreparedStatement statement = connection.prepareStatement(queryOfInsert, autoGeneratedKeys)) {
            statement.execute();

            if (autoGeneratedKeys == PreparedStatement.RETURN_GENERATED_KEYS) {
                ResultSet generatedKeys = statement.getGeneratedKeys();

                generatedKeys.next();

                return generatedKeys.getObject(1);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return null;
    }

    private void update(Object entity) {
        String query = updateDMLGenerator.generate(entity);

        jdbcTemplate.execute(query);
    }

    @Override
    public void remove(Object entity) {
        Class<?> clazz = entity.getClass();
        Table table = Table.from(clazz);

        Field idField = table.getIdField();

        Object id = FieldUtils.getValue(idField, entity);

        removeCache(clazz, id);

        String query = deleteDMLGenerator.generateDeleteById(table, id);

        jdbcTemplate.execute(query);
    }

    @NotNull
    private <T> RowMapper<Object> toObject(Class<T> clazz, Object id, Table table) {
        return resultSet -> {
            T t = clazz.newInstance();

            table.getAllFieldNames().forEach(it -> {
                Field fieldByName = table.getFieldByName(it);

                try {
                    Object value = resultSet.getObject(it);

                    FieldUtils.setValue(fieldByName, t, value);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            });

            putCache(clazz, id, t);

            return t;
        };
    }

    private boolean containsCache(Class clazz, Object id) {
        Entry<Class, Object> entry = new SimpleEntry<>(clazz, id);

        return cache.containsKey(entry);
    }

    private void putCache(Class clazz, Object id, Object entity) {
        Entry<Class, Object> entry = new SimpleEntry<>(clazz, id);

        cache.put(entry, entity);
    }

    private Object getCache(Class clazz, Object id) {
        Entry<Class, Object> entry = new SimpleEntry<>(clazz, id);

        return cache.get(entry);
    }

    private void removeCache(Class clazz, Object id) {
        Entry<Class, Object> entry = new SimpleEntry<>(clazz, id);

        cache.remove(entry);
    }
}
