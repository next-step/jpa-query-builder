package persistence.sql.ddl;

import jakarta.persistence.Column;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Transient;

import java.lang.reflect.Field;
import java.util.Arrays;

class CreateQuery extends Query {

    public static final String DEFAULT_CREATE_QUERY = "CREATE TABLE %s (%s)";
    public static final String DEFAULT_PRIMARY_KEY_QUERY = ", PRIMARY KEY (%s)";

    private String columns;

    private <T> CreateQuery(Class<T> tClass) {
        super(tClass);
    }

    public static <T> CreateQuery initCreateQuery(Class<T> tClass) {
        if (!isEntity(tClass)) {
            throw new NullPointerException();
        }

        CreateQuery createQuery = new CreateQuery(tClass);
        createQuery.createColumns();

        return createQuery;
    }

    /**
     * 해당 Class를 분석하여 CREATE QUERY로 조합합니다.
     */
    public String crateQuery() {
        return String.format(DEFAULT_CREATE_QUERY, this.getTableName(), columns);
    }

    /**
     * class 필드를 읽어 column으로 설정합니다.
     */
    private String parseColumn() {
        String[] fields = Arrays.stream(this.getFields())
                .filter(field -> !field.isAnnotationPresent(Transient.class))
                .map(field -> {
                    String columnName = extractColumn(field);

                    return columnName + parseType(field.getType()) + extractConstraints(field) + extractGeneratedValue(field);
                })
                .toArray(String[]::new);

        return String.join(", ", fields);
    }

    /**
     * @Column의 제약조건을 추가해줍니다.
     */
    private String extractConstraints(Field field) {
        String nullable = "";

        if (isAnnotation(field, Column.class)
                && !field.getDeclaredAnnotation(Column.class).nullable()) {
            nullable += " not null";
        }

        return nullable;
    }

    /**
     * @GeneratedValue가 유효시 조건을 추가해 줍니다.
     */
    private String extractGeneratedValue(Field field) {
        if (!isAnnotation(field, GeneratedValue.class)) {
            return "";
        }

        return getGeneratedValue(field.getAnnotation(GeneratedValue.class).strategy());
    }

    /**
     * @Column의 name이 유효하다면 column명으로 설정하여 반환합니다.
     * 없을 경우 기존 field명을 반환합니다.
     */
    private String extractColumn(Field field) {
        String columnName = field.getName();

        if (!isAnnotation(field, Column.class)) {
            return columnName;
        }

        if (!"".equals(field.getDeclaredAnnotation(Column.class).name())) {
            columnName = field.getDeclaredAnnotation(Column.class).name();
        }

        return columnName;
    }

    /**
     * @Id로 설정된 필드를 Primary Key로 설정합니다.
     */
    private String parsePrimary() {
        String[] fields = Arrays.stream(this.getFields()).filter(field -> isAnnotation(field, Id.class))
                .map(Field::getName)
                .toArray(String[]::new);

        return String.format(DEFAULT_PRIMARY_KEY_QUERY, String.join(", ", fields));
    }

    /**
     * 필드의 자료형을 읽어 칼럼 자료형으로 치환합니다.
     */
    private <T> String parseType(Class<T> type) {
        return " " + getType(type);
    }

    private <T> String getType(Class<T> type) {
        switch (type.getSimpleName()) {
            case "int":
                return "INT";
            case "Integer":
                return "INTEGER";
            case "Long":
                return "BIGINT";
            case "String":
                return "VARCHAR(255)";
        }

        throw new IllegalArgumentException("유효하지 않은 자료형입니다.");
    }

    private String getGeneratedValue(GenerationType generationType) {
        switch (generationType) {
            case IDENTITY:
                return " generated by default as identity";
        }

        throw new IllegalArgumentException("지원하지 않는 GeneratedValue 입니다.");
    }

    private void createColumns() {
        this.columns = parseColumn() + parsePrimary();
    }
}
