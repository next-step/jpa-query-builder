package persistence.sql.common.meta;

import jakarta.persistence.Column;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import persistence.exception.InvalidGeneratedValueException;

import java.lang.reflect.Field;

class Constraint {
    private GenerationType generationType;
    private boolean isNotNull;

    private Constraint(Field field) {
        this.generationType = confirmGeneratedValue(field);
        this.isNotNull = confirmNullable(field);
    }

    protected static Constraint of(Field field) {
        return new Constraint(field);
    }

    /**
     * @Nullable 있는지 검증합니다.
     */
    private boolean confirmNullable(Field field) {
        return field.isAnnotationPresent(Column.class)
                && !field.getDeclaredAnnotation(Column.class).nullable();
    }

    /**
     * @GeneratedValue 있는지 검증합니다.
     */
    private GenerationType confirmGeneratedValue(Field field) {
        if (!field.isAnnotationPresent(GeneratedValue.class)) {
            return null;
        }

        return GenerationType.valueOf(field.getAnnotation(GeneratedValue.class).strategy().name());
    }

    /**
     * GenerationType을 읽어 기본키 생성 전략 생성
     */
    private String getGenerationType(GenerationType generationType) {
        switch (generationType) {
            case IDENTITY:
                return " generated by default as identity";
        }

        throw new InvalidGeneratedValueException();
    }

    protected String getNotNull() {
        if(isNotNull) {
            return " not null";
        }
        return "";
    }

    protected String getGeneratedValue() {
        if(generationType == null) {
            return "";
        }

        return getGenerationType(generationType);
    }
}
