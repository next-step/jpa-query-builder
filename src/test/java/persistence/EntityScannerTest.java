package persistence;

import domain.Person;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.*;

class EntityScannerTest {

    @Test
    void table_추출() {
        EntityScanner entityScanner = new EntityScanner(Person.class);

        Table actual = entityScanner.table();

        assertThat(actual.expression()).isEqualTo("Person");
    }

    @Test
    void column_annotation_name_추출() {
        EntityScanner entityScanner = new EntityScanner(Person.class);

        Columns actual = entityScanner.columns();

        assertTrue(actual.getColumn("nick_name").isPresent());
    }

    @Test
    void column_annotation_name속성_없으면_필드이름_추출() {
        EntityScanner entityScanner = new EntityScanner(Person.class);

        Columns actual = entityScanner.columns();

        assertTrue(actual.getColumn("email").isPresent());
    }

    @Test
    void column_annotation_없으면_필드이름_추출() {
        EntityScanner entityScanner = new EntityScanner(Person.class);

        Columns actual = entityScanner.columns();

        assertTrue(actual.getColumn("id").isPresent());
    }

    @Test
    @DisplayName("표현식 추출, 맵핑 불가 맵핑 안됨")
    void 표현식() {
        EntityScanner entityScanner = new EntityScanner(Person.class);

        Columns actual = entityScanner.columns();

        assertThat(actual.expression()).isEqualTo("id bigint generated by default as identity,nick_name varchar(255) ,old integer ,email varchar(255) not null,primary key (id)");
    }
}
