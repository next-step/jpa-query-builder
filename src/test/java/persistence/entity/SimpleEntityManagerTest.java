package persistence.entity;

import jdbc.JdbcTemplate;
import jdbc.RowMapper;
import org.junit.jupiter.api.*;
import persistence.sql.JdbcServerTest;
import persistence.sql.TestJdbcServerExtension;
import persistence.sql.ddl.PersonV3;
import persistence.sql.dialect.Dialect;
import persistence.sql.dialect.H2Dialect;
import persistence.sql.dml.DefaultDmlQueryBuilder;
import persistence.sql.mapping.*;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.groups.Tuple.tuple;

@JdbcServerTest
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class SimpleEntityManagerTest {

    private static final JdbcTemplate jdbcTemplate = TestJdbcServerExtension.getJdbcTemplate();

    private final TableBinder tableBinder = new TableBinder();
    private final Dialect dialect = new H2Dialect();
    private final DefaultDmlQueryBuilder dmlQueryBuilder = new DefaultDmlQueryBuilder(dialect);
    private final EntityManager entityManager = new SimpleEntityManager(tableBinder, dmlQueryBuilder, jdbcTemplate);

    private final RowMapper<PersonV3> rowMapper = new EntityRowMapper<>(PersonV3.class);

    @BeforeAll
    static void beforeAll() {
        final String ddl = "create table users (\n" +
                "    id bigint generated by default as identity,\n" +
                "    nick_name varchar(255),\n" +
                "    old integer,\n" +
                "    email varchar(255) not null,\n" +
                "    primary key (id)\n" +
                ")";
        jdbcTemplate.execute(ddl);
    }

    @AfterAll
    static void afterAll() {
        List<String> tableNames = jdbcTemplate
                .query("SELECT table_name FROM information_schema.tables WHERE table_schema='PUBLIC'", resultSet -> resultSet.getString("table_name"));

        for (String tableName : tableNames) {
            jdbcTemplate.execute("DROP TABLE IF EXISTS " + tableName + " CASCADE");
        }
    }

    @AfterEach
    void tearDown() {
        jdbcTemplate.execute("delete from users");
    }

    @DisplayName("엔티티 클래스 타입과 id 값으로 엔티티를 조회 후 반환한다")
    @Test
    @Order(0)
    public void find() throws Exception {
        // given
        final Class<PersonV3> clazz = PersonV3.class;
        final long id = 1L;
        final String name = "name";
        final int age = 20;
        final String email = "email@domain.com";

        final String insertQuery = "insert\n" +
                "into\n" +
                "    users\n" +
                "    (nick_name, old, email, id)\n" +
                "values\n" +
                "    ('" + name + "', " + age + ", '" + email + "', default)";
        jdbcTemplate.execute(insertQuery);

        // when
        final PersonV3 entity = entityManager.find(clazz, id);

        // then
        assertThat(entity).isNotNull()
                .extracting("id", "name", "age", "email", "index")
                .contains(id, name, age, email, null);
    }

    @DisplayName("엔티티 객체로 엔티티를 insert 한다")
    @Test
    public void persist() throws Exception {
        // given
        final String name = "name";
        final int age = 20;
        final String email = "email@domain.com";
        final PersonV3 person = new PersonV3(0L, name, age, email, 1);
        final Class<?> clazz = person.getClass();

        // when
        entityManager.persist(person);

        // then
        final String select = "select * from users";
        final List<PersonV3> result = jdbcTemplate.query(select, rowMapper);
        assertThat(result).hasSize(1)
                .extracting("name", "age", "email", "index")
                .contains(tuple(name, age, email, null));
    }

    @DisplayName("엔티티 객체로 엔티티를 db 에서 삭제한다")
    @Test
    public void remove() throws Exception {
        // given
        final String name = "name";
        final int age = 20;
        final String email = "email@domain.com";
        final PersonV3 person = new PersonV3(0L, name, age, email, 1);

        // when
        entityManager.remove(person);

        // then
        final String select = "select * from users";
        final List<PersonV3> result = jdbcTemplate.query(select, rowMapper);
        assertThat(result).isEmpty();
    }

}
