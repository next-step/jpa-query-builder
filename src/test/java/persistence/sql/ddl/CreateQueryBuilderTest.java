package persistence.sql.ddl;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import persistence.entity.Person_Week1_Step2_Demand1;

import java.util.stream.Stream;

import static org.assertj.core.api.Assertions.assertThat;

class CreateQueryBuilderTest {

    private final CreateQueryBuilder createQueryBuilder = new CreateQueryBuilder();

    @ParameterizedTest
    @DisplayName("엔티티에 알맞는 create 쿼리를 생성한다.")
    @MethodSource("createQueryTestParam")
    void createQueryTest(Object entity, String expectedQuery) {
        String actualQuery = createQueryBuilder.getQuery(entity);
        assertThat(actualQuery).isEqualTo(expectedQuery);
    }

    private static Stream<Arguments> createQueryTestParam() {
        return Stream.of(
                Arguments.of(new Person_Week1_Step2_Demand1(), "CREATE TABLE PERSON_WEEK1_STEP2_DEMAND1 (ID BIGINT NOT NULL, AGE INTEGER, NAME VARCHAR(255), PRIMARY KEY (ID))")
//                Arguments.of(new Person_Week1_Step2_Demand2(), "CREATE TABLE PERSON_WEEK1_STEP2_DEMAND2 (ID BIGINT GENERATED BY DEFAULT AS IDENTITY, OLD INTEGER, EMAIL VARCHAR(255) NOT NULL, NICK_NAME VARCHAR(255), PRIMARY KEY (ID))"),
//                Arguments.of(new Person_Week1_Step2_Demand3(), "CREATE TABLE USERS (ID BIGINT GENERATED BY DEFAULT AS IDENTITY, OLD INTEGER, EMAIL VARCHAR(255) NOT NULL, NICK_NAME VARCHAR(255), PRIMARY KEY (ID))")
        );
    }

}
