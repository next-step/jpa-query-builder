package persistence.sql.ddl;

import database.H2;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import persistence.sql.dialect.DialectFactory;
import persistence.fixture.Person;
import persistence.fixture.PersonWithAnnotations;
import persistence.fixture.PersonWithTransientAnnotation;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class DdlQueryBuilderTest {
    DdlQueryBuilder queryBuilder;

    @BeforeEach
    void setUp() {
        queryBuilder = new DdlQueryBuilder(DialectFactory.create(H2.class));
    }

    @Test()
    @DisplayName("기본 @Id 어노테이션만 지닌 Person 엔티티의 CREATE TABLE 쿼리를 생성한다.")
    void createPersonDdlTest() {
        String expectedQuery = "CREATE TABLE \"Person\" (" +
                "\"id\" bigint NOT NULL, " +
                "\"name\" varchar(255) NULL, " +
                "\"age\" int NULL, " +
                "PRIMARY KEY (\"id\"));";
        String resultQuery = queryBuilder.buildCreateTableQuery(Person.class);

        assertEquals(expectedQuery, resultQuery);
    }

    @Test()
    @DisplayName("GeneratedValue와 Column 어노테이션을 지닌 Person 엔티티의 CREATE TABLE 쿼리를 생성한다.")
    void createPersonWithAnnotationsDdlTest() {
        String expectedQuery = "CREATE TABLE \"PersonWithAnnotations\" (" +
                "\"id\" bigint generated by default as IDENTITY, " +
                "\"nick_name\" varchar(255) NULL, " +
                "\"old\" int NULL, " +
                "\"email\" varchar(255) NOT NULL, " +
                "PRIMARY KEY (\"id\"));";
        String resultQuery = queryBuilder.buildCreateTableQuery(PersonWithAnnotations.class);

        assertEquals(expectedQuery, resultQuery);
    }

    @Test()
    @DisplayName("@Table과 @Transient 어노테이션도 지닌 Person 엔티티의 CREATE TABLE 쿼리를 생성한다.")
    void createPersonWithTransientAnnotationDdlTest() {
        String expectedQuery = "CREATE TABLE \"users\" (" +
                "\"id\" bigint generated by default as IDENTITY, " +
                "\"nick_name\" varchar(255) NULL, " +
                "\"old\" int NULL, " +
                "\"email\" varchar(100) NOT NULL, " +
                "PRIMARY KEY (\"id\"));";
        String resultQuery = queryBuilder.buildCreateTableQuery(PersonWithTransientAnnotation.class);

        assertEquals(expectedQuery, resultQuery);
    }

    @Test()
    @DisplayName("DROP TABLE 쿼리를 생성한다.")
    void dropDdlTest() {
        String expectedQuery = "DROP TABLE IF EXISTS \"users\"";
        String resultQuery = queryBuilder.buildDropTableQuery(PersonWithTransientAnnotation.class);

        assertEquals(expectedQuery, resultQuery);
    }
}
